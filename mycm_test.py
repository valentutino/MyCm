import google.generativeai as genai
import os

# -------------------------------------------------------------------
# 1. CONFIGURACI√ìN
# ¬°IMPORTANTE! Pega tu clave API de Google AI Studio aqu√≠
# -------------------------------------------------------------------
try:
    genai.configure(api_key="AIzaSyCbUSbs8EonxV-iMsUhXflX-omgQWCXfhw")
except AttributeError:
    print("Error: La API key no est√° configurada o la librer√≠a no se instal√≥ correctamente.")
    # Si usas un entorno como Google Colab, puedes usar secrets:
    # from google.colab import userdata
    # genai.configure(api_key=userdata.get('GEMINI_API_KEY'))
    exit()

# Inicializa el modelo de IA (Gemini)
model = genai.GenerativeModel('gemini-2.5-pro')

# -------------------------------------------------------------------
# 2. SIMULACI√ìN DEL REGISTRO (Punto 4.1 del Pitch Deck)
# -------------------------------------------------------------------
# Simulamos la base de datos del cliente.
# Esto es lo que MyCm sabr√≠a del negocio.
negocio = {
    "nombre": "La Tostader√≠a",
    "descripcion": "Soy 'La Tostader√≠a', una cafeter√≠a de especialidad en Villa Crespo. Mi onda es r√∫stica y amigable. Vendemos caf√© de grano, medialunas caseras y brunch.",
    "colores_marca": ["Marr√≥n tierra", "Beige", "Verde oliva"],
    "logo_path": "/logos/la_tostaderia_logo.png", # Simulado
    "ubicacion": "Villa Crespo, CABA, Argentina"
}

# -------------------------------------------------------------------
# 3. EL "CEREBRO" DE MyCm (Funci√≥n de IA)
# -------------------------------------------------------------------
def generar_post_mycm(perfil_negocio, idea_post):
    """
    Toma el perfil del negocio y una idea, y genera el contenido del post.
    """
    
    # --- INGENIER√çA DE PROMPT ---
    # Este es el coraz√≥n de tu app. Es el "prompt" que le damos a Gemini.
    prompt_template = f"""
    **Rol:** Eres 'MyCm', un Community Manager experto en IA para PYMES de Argentina.
    Tu objetivo es crear un posteo de Instagram listo para publicar.
    
    **Datos del Negocio (Cliente):**
    * Nombre: {perfil_negocio['nombre']}
    * Descripci√≥n y Tono: {perfil_negocio['descripcion']}
    * Ubicaci√≥n: {perfil_negocio['ubicacion']}

    **Tarea:**
    Debes generar el contenido para un posteo de Instagram basado en la siguiente idea:
    * Idea del Post: "{idea_post}"

    **Reglas de Generaci√≥n:**
    1.  **Texto (Copy):** Escribe un texto (copy) que sea atractivo, cercano y en espa√±ol de Argentina (us√° "vos", "ten√©s", etc.).
    2.  **Tono:** El tono debe ser coherente con la descripci√≥n del negocio: "{perfil_negocio['descripcion'].split('Mi onda es ')[-1]}".
    3.  **CTA:** Incluye un Call-to-Action (Llamado a la Acci√≥n) claro y amigable (ej. "¬°Ven√≠ a probarlo!", "Etiquet√° a tu amigo fan√°tico del caf√©").
    4.  **Hashtags:** Genera una lista de 7 a 10 hashtags RELEVANTES. Deben incluir:
        * Hiper-locales (basados en {perfil_negocio['ubicacion']}).
        * Espec√≠ficos del producto (ej. #CafeDeEspecialidad).
        * Generales del rubro (ej. #Cafeteria).

    **Formato de Respuesta (OBLIGATORIO):**
    COPY:
    [Aqu√≠ el texto del posteo. Debe tener saltos de l√≠nea y emojis.]
    ---
    HASHTAGS:
    [#hashtag1, #hashtag2, #hashtag3, #hashtag4, #hashtag5, #hashtag6, #hashtag7]
    """
    
    print("\n[MyCm]... Contactando al motor de IA para generar el post...\n")
    
    try:
        # Enviamos la solicitud a la API de Gemini
        response = model.generate_content(prompt_template)
        
        # Procesamos la respuesta para que sea f√°cil de usar
        # (El formato que pedimos ayuda a "parsear" esto)
        partes = response.text.split("---")
        copy = partes[0].replace("COPY:", "").strip()
        hashtags = partes[1].replace("HASHTAGS:", "").strip()
        
        return copy, hashtags

    except Exception as e:
        print(f"Error al contactar la API de Gemini: {e}")
        return None, None

# -------------------------------------------------------------------
# 4. SIMULACI√ìN DEL "MOMENTO M√ÅGICO" (Punto 4.2, 4.3 y 4.4)
# -------------------------------------------------------------------
if __name__ == "__main__":
    print("--- Iniciando Simulaci√≥n de MyCm (Prueba de Concepto) ---")
    print(f"Negocio Conectado: {negocio['nombre']} ({negocio['ubicacion']})")
    
    # 4.2. La IA Planifica (Simulado)
    # En la app real, esto vendr√≠a de un calendario inteligente.
    # Aqu√≠ lo definimos manually para la prueba.
    idea_contextual = "Posteo para un d√≠a de lluvia, ideal para un caf√© caliente y algo rico."
    # idea_contextual = "Promoci√≥n de 2x1 en medialunas para el finde largo."
    # idea_contextual = "Foto del equipo preparando la apertura del local."

    print(f"Idea del d√≠a (Planificador): {idea_contextual}")
    
    # 4.3. El Momento M√°gico (Generaci√≥n)
    copy_generado, hashtags_generados = generar_post_mycm(negocio, idea_contextual)
    
    if copy_generado:
        print("=" * 40)
        print("üì≤ [NOTIFICACI√ìN DE MyCm]")
        print("¬°Tu post de ma√±ana est√° listo para aprobar!")
        print("=" * 40)
        
        # 4.4. Aprobaci√≥n (15 seg)
        print("\n--- VISTA PREVIA DEL POST ---\n")
        
        # Simulaci√≥n de la imagen que usar√≠a la plantilla de la marca
        print(f"[IMAGEN SIMULADA: üñºÔ∏è]")
        print(f"(Se generar√≠a una imagen usando la paleta de colores '{negocio['colores_marca']}' y el logo '{negocio['logo_path']}')\n")
        
        # Contenido generado por IA
        print("--- Texto del Posteo ---")
        print(copy_generado)
        print("\n--- Hashtags ---")
        print(hashtags_generados)
        
        print("\n" + "=" * 40)
        
        # Simulaci√≥n de la acci√≥n del usuario
        aprobacion = input("¬øAprob√°s este post para publicar ma√±ana? (s/n): ").lower()
        
        # --- ESTA ES LA L√çNEA CORREGIDA ---
        if aprobacion == 's':
            print("\n‚úÖ ¬°Perfecto! El post se program√≥ autom√°ticamente.")
        else:
            print("\n‚ùå Post rechazado. (En la app real, podr√≠as pedir 'Regenerar' o 'Editar').")
            
    else:
        print("No se pudo generar el posteo. Revisa la API Key o el error.")